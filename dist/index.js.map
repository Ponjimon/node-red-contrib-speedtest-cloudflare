{"version":3,"file":"index.js","sources":["../src/utils/math.ts","../src/speedtest-cloudflare.ts","../src/index.ts"],"sourcesContent":["export const average = (values: number[]) =>\n  values.reduce((p, c) => p + c, 0) / values.length;\n\nexport const median = (values: number[]) => {\n  const half = Math.floor(values.length / 2);\n\n  values.sort((a, b) => a - b);\n\n  if (values.length % 2) {\n    return values[half];\n  }\n\n  return (values[half - 1] + values[half]) / 2;\n};\n\nexport const quartile = (values: number[], percentile: number) => {\n  values.sort((a, b) => a - b);\n\n  const pos = (values.length - 1) * percentile;\n  const base = Math.floor(pos);\n  const rest = pos - base;\n\n  if (values[base + 1] !== undefined) {\n    return values[base] + rest * (values[base + 1] - values[base]);\n  }\n\n  return values[base];\n};\n\nexport const jitter = (values: number[]) =>\n  average(values.map((value, i, arr) => Math.abs(value - arr[i + 1])));\n","import fetch from 'node-fetch';\nimport https, { RequestOptions } from 'https';\nimport { performance } from 'perf_hooks';\nimport { URL } from 'url';\nimport { quartile } from './utils/math';\n\nexport class SpeedtestCloudflare {\n  private readonly host = 'speed.cloudflare.com';\n\n  async start() {\n    const downloadTestsConfig = [\n      [10e4, 10],\n      [100e4, 8],\n      [1000e4, 6],\n      [2500e4, 4],\n      [10000e4, 3],\n    ];\n    const downloadTests = await Promise.all(\n      downloadTestsConfig.map(([bytes, iterations]) =>\n        this.measureDownload(bytes, iterations)\n      )\n    );\n    const download = quartile(downloadTests.flat(), 0.9).toFixed(2);\n\n    const uploadTestsConfig = [\n      [10e4, 8],\n      [100e4, 6],\n      [1000e4, 4],\n    ];\n    const uploadTests = (\n      await Promise.all(\n        uploadTestsConfig.map(([bytes, iterations]) =>\n          this.measureUpload(bytes, iterations)\n        )\n      )\n    ).flat();\n    const upload = quartile(uploadTests, 0.9).toFixed(2);\n\n    return { download, upload };\n  }\n\n  async measureDownload(bytes: number, iterations: number) {\n    const measurements = [];\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        const { ttfb, ended } = await this.download(bytes);\n        const transferTime = ended - ttfb;\n        measurements.push(this.measureSpeed(bytes, transferTime));\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    return measurements;\n  }\n\n  async measureUpload(bytes: number, iterations: number) {\n    const measurements = [];\n\n    for (let i = 0; i < iterations; i++) {\n      try {\n        const { serverDuration } = await this.upload(bytes);\n        const transferTime = serverDuration;\n        measurements.push(this.measureSpeed(bytes, transferTime));\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    return measurements;\n  }\n\n  private download(bytes: number) {\n    return this.request({\n      hostname: this.host,\n      path: `/__down?bytes=${bytes}`,\n      method: 'GET',\n    });\n  }\n\n  private upload(bytes: number) {\n    const data = '0'.repeat(bytes);\n    return this.request(\n      {\n        hostname: this.host,\n        path: `/__up`,\n        method: 'POST',\n        headers: {\n          'Content-Length': Buffer.byteLength(data),\n        },\n      },\n      data\n    );\n  }\n\n  private measureSpeed(bytes: number, duration: number) {\n    return (bytes * 8) / (duration / 1000) / 1e6;\n  }\n\n  private request(options: string | RequestOptions | URL, data = '') {\n    let started: number;\n    let dnsLookup: number;\n    let tcpHandshake: number;\n    let sslHandshake: number;\n    let ttfb: number;\n    let ended: number;\n\n    return new Promise<{\n      started: number;\n      dnsLookup: number;\n      tcpHandshake: number;\n      sslHandshake: number;\n      ttfb: number;\n      ended: number;\n      serverDuration: number;\n    }>((resolve, reject) => {\n      started = performance.now();\n      const req = https.request(options, res => {\n        res.once('readable', () => {\n          ttfb = performance.now();\n        });\n        res.on('data', () => {});\n        res.on('end', () => {\n          ended = performance.now();\n          resolve({\n            started,\n            dnsLookup,\n            tcpHandshake,\n            sslHandshake,\n            ttfb,\n            ended,\n            serverDuration: parseFloat(\n              String(res.headers['server-timing']).slice(22)\n            ),\n          });\n        });\n      });\n\n      req.on('socket', socket => {\n        socket.on('lookup', () => {\n          dnsLookup = performance.now();\n        });\n        socket.on('connect', () => {\n          tcpHandshake = performance.now();\n        });\n        socket.on('secureConnect', () => {\n          sslHandshake = performance.now();\n        });\n      });\n\n      req.on('error', error => {\n        reject(error);\n      });\n\n      req.write(data);\n      req.end();\n    });\n  }\n}\n","import { Node, NodeDef, NodeInitializer } from 'node-red';\nimport { SpeedtestCloudflare } from './speedtest-cloudflare';\n\nconst init: NodeInitializer = RED => {\n  function SpeedTest(this: Node, config: NodeDef) {\n    RED.nodes.createNode(this, config);\n\n    this.on('input', async (msg, send, done) => {\n      this.status({ fill: 'yellow', shape: 'dot', text: 'Requesting' });\n      const test = new SpeedtestCloudflare();\n      try {\n        const payload = await test.start();\n        this.status({});\n        this.send({ payload });\n      } catch (e) {\n        this.status({ fill: 'red', shape: 'dot', text: e.message });\n      }\n    });\n  }\n\n  RED.nodes.registerType('speedtest-cloudflare', SpeedTest);\n};\nexport default init;\n"],"names":["quartile","values","percentile","sort","a","b","pos","length","base","Math","floor","undefined","SpeedtestCloudflare","host","downloadTests","Promise","all","map","bytes","iterations","this","measureDownload","download","flat","toFixed","uploadTests","measureUpload","upload","measurements","i","ttfb","ended","push","measureSpeed","e","serverDuration","request","hostname","path","method","data","repeat","headers","Buffer","byteLength","duration","options","started","dnsLookup","tcpHandshake","sslHandshake","resolve","reject","performance","now","req","https","res","once","on","parseFloat","String","slice","socket","error","write","end","RED","nodes","registerType","config","createNode","async","msg","send","done","status","fill","shape","text","test","payload","start","message"],"mappings":"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"}